diff --git a/node_modules/@evershop/evershop/bin/install/index.js b/node_modules/@evershop/evershop/bin/install/index.js
index ad16c96..b4147be 100644
--- a/node_modules/@evershop/evershop/bin/install/index.js
+++ b/node_modules/@evershop/evershop/bin/install/index.js
@@ -229,7 +229,7 @@ DB_SSLMODE="${sslMode}"
   await startTransaction(connection);
   try {
     // Create the admin user
-    const passwordHash = hashPassword(adminUser.password || '123456');
+    const passwordHash = await hashPassword(adminUser.password || '123456');
     await execute(
       connection,
       `CREATE TABLE IF NOT EXISTS "admin_user" (
diff --git a/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js b/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
index 0406940..2d1f6c1 100644
--- a/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
+++ b/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
@@ -34,6 +34,7 @@ const {
 const {
   getCookieSecret
 } = require('@evershop/evershop/src/modules/auth/services/getCookieSecret');
+const rateLimiterMiddleware = require('./rateLimiter');
 
 module.exports = exports = {};
 
@@ -41,6 +42,12 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
   app,
   routes
 ) {
+  // Add rate limiter middleware as a regular middleware function
+  app.use((request, response, next) => {
+    const delegate = { continue: false };
+    rateLimiterMiddleware(request, response, delegate, next);
+  });
+
   app.use((request, response, next) => {
     response.debugMiddlewares = [];
     next();
@@ -74,8 +81,8 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
       process.env.NODE_ENV === 'test'
         ? undefined
         : new (sessionStorage(session))({
-            pool
-          }),
+          pool
+        }),
     secret: cookieSecret,
     cookie: {
       maxAge: getConfig('system.session.maxAge', 24 * 60 * 60 * 1000)
@@ -257,7 +264,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               stats: 'none'
             }
           );
-          middlewareFunc.context.logger.info = () => {};
+          middlewareFunc.context.logger.info = () => { };
         } else {
           middlewareFunc = route.webpackMiddleware;
         }
@@ -279,7 +286,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               stats: 'none'
             }
           );
-          notFoundMiddlewareFunc.context.logger.info = () => {};
+          notFoundMiddlewareFunc.context.logger.info = () => { };
         } else {
           notFoundMiddlewareFunc = notFoundRoute.webpackMiddleware;
         }
@@ -295,7 +302,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               publicPath: '/',
               stats: 'none'
             });
-          adminNotFoundMiddlewareFunc.context.logger.info = () => {};
+          adminNotFoundMiddlewareFunc.context.logger.info = () => { };
         } else {
           adminNotFoundMiddlewareFunc = adminNotFoundRoute.webpackMiddleware;
         }
@@ -314,8 +321,8 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
         const hotMiddleware = route.hotMiddleware
           ? route.hotMiddleware
           : require('webpack-hot-middleware')(webpackCompiler, {
-              path: `/eHot/${route.id}`
-            });
+            path: `/eHot/${route.id}`
+          });
         if (!route.hotMiddleware) {
           route.hotMiddleware = hotMiddleware;
         }
diff --git a/node_modules/@evershop/evershop/bin/lib/rateLimiter.js b/node_modules/@evershop/evershop/bin/lib/rateLimiter.js
new file mode 100644
index 0000000..5c9ac5c
--- /dev/null
+++ b/node_modules/@evershop/evershop/bin/lib/rateLimiter.js
@@ -0,0 +1,64 @@
+// modules/core/middleware/rateLimit.js
+const rateLimit = require('express-rate-limit');
+
+// Create API rate limiter
+const apiLimiter = rateLimit({
+    windowMs: 15 * 60 * 1000, // 15 minutes
+    max: 100, // Limit each IP to 100 requests per windowMs
+    message: 'Too many API requests from this IP, please try again later'
+});
+
+// Create login rate limiter
+const loginLimiter = rateLimit({
+    windowMs: 60 * 60 * 1000, // 1 hour
+    max: 5, // Limit each IP to 5 login attempts per hour
+    message: 'Too many login attempts from this IP, please try again after an hour'
+});
+
+// Create registration rate limiter
+const registerLimiter = rateLimit({
+    windowMs: 24 * 60 * 60 * 1000, // 24 hours
+    max: 3, // Limit each IP to 3 registration attempts per day
+    message: 'Too many registration attempts from this IP, please try again tomorrow'
+});
+
+// Fixed rate limiter middleware
+const rateLimiterMiddleware = async (request, response, delegate, next) => {
+    try {
+        // Apply API rate limiter to all API routes
+        if (request.originalUrl.startsWith('/api/')) {
+            return apiLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // Apply login rate limiter to login route
+        if (request.originalUrl === '/customer/login' && request.method === 'POST') {
+            return loginLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // Apply registration rate limiter to registration route
+        if (request.originalUrl === '/customer/register' && request.method === 'POST') {
+            return registerLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // No rate limiting applied
+        delegate.continue = true;
+        next();
+    } catch (error) {
+        console.error('Rate limiter error:', error);
+        response.status(500).json({
+            error: 'Rate limiter error',
+            message: error.message
+        });
+    }
+};
+
+module.exports = rateLimiterMiddleware;
\ No newline at end of file
diff --git a/node_modules/@evershop/evershop/bin/lib/startUp.js b/node_modules/@evershop/evershop/bin/lib/startUp.js
index 701bc46..07c3718 100644
--- a/node_modules/@evershop/evershop/bin/lib/startUp.js
+++ b/node_modules/@evershop/evershop/bin/lib/startUp.js
@@ -1,4 +1,5 @@
-const http = require('http');
+const https = require('https');
+const fs = require('fs');
 const config = require('config');
 const { Handler } = require('@evershop/evershop/src/lib/middleware/Handler');
 const spawn = require('cross-spawn');
@@ -21,7 +22,10 @@ const { getEnabledExtensions } = require('../extension');
 
 let app = createApp();
 /** Create a http server */
-const server = http.createServer(app);
+const server = https.createServer({
+  key: fs.readFileSync('key.pem'),
+  cert: fs.readFileSync('cert.pem')
+}, app);
 
 module.exports.start = async function start(cb) {
   const modules = [...getCoreModules(), ...getEnabledExtensions()];
diff --git a/node_modules/@evershop/evershop/bin/user/changePassword.js b/node_modules/@evershop/evershop/bin/user/changePassword.js
index 675400e..5651b87 100644
--- a/node_modules/@evershop/evershop/bin/user/changePassword.js
+++ b/node_modules/@evershop/evershop/bin/user/changePassword.js
@@ -54,7 +54,7 @@ async function updatePassword() {
     }
     await update('admin_user')
       .given({
-        password: hashPassword(password)
+        password: await hashPassword(password)
       })
       .where('admin_user_id', '=', user.admin_user_id)
       .execute(pool);
diff --git a/node_modules/@evershop/evershop/bin/user/create.js b/node_modules/@evershop/evershop/bin/user/create.js
index 0333128..e0c9bf6 100644
--- a/node_modules/@evershop/evershop/bin/user/create.js
+++ b/node_modules/@evershop/evershop/bin/user/create.js
@@ -64,7 +64,7 @@ async function createAdminUser() {
       .given({
         full_name,
         email,
-        password: hashPassword(password)
+        password: await hashPassword(password)
       })
       .execute(pool);
     success('Admin user created successfully');
diff --git a/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js b/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js
index 79846b9..ff7e3d7 100644
--- a/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js
+++ b/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js
@@ -1,59 +1,78 @@
-const bcrypt = require('bcryptjs');
 const { getValueSync } = require('./registry');
+const argon2 = require('argon2');
 
-module.exports.hashPassword = function hashPassword(password) {
-  const salt = bcrypt.genSaltSync(10);
-  const hash = bcrypt.hashSync(password, salt);
-  return hash;
+// Argon2 configuration object for consistent settings
+const argon2Config = {
+    type: argon2.argon2id,
+    memoryCost: 65536,    //64MB
+    timeCost: 3,          // iterations -3
+    parallelism: 4,
+    saltLength: 16
 };
 
-module.exports.comparePassword = function comparePassword(password, hash) {
-  return bcrypt.compareSync(password, hash);
+module.exports.hashPassword = async function hashPassword(password) {
+    try {
+        if (!password) {
+            throw new Error('Password is required');
+        }
+        return await argon2.hash(password, argon2Config);
+    } catch (error) {
+        throw new Error(`Failed to hash password: ${error.message}`);
+    }
 };
 
-module.exports.verifyPassword = function verifyPassword(password) {
-  const rules = getValueSync(
-    'passwordVerifyRules',
-    [
-      {
-        callback: (password) => password.length >= 6,
-        message: 'Password must be at least 6 characters'
-      }
-    ],
-    {},
-    (rules) => {
-      // rules must be an array
-      if (!Array.isArray(rules)) {
-        return false;
-      }
-      try {
-        // Each rule must be an object with callback and message
-        rules.forEach((rule) => {
-          if (typeof rule !== 'object') {
-            throw new Error('Rule must be an object');
-          }
-          if (typeof rule.callback !== 'function') {
-            throw new Error('Rule callback must be a function');
-          }
-          if (typeof rule.message !== 'string') {
-            throw new Error('Rule message must be a string');
-          }
-        });
-        return true;
-      } catch (e) {
-        return false;
-      }
+module.exports.comparePassword = async function comparePassword(password, hash) {
+    try {
+        if (!password || !hash) {
+            throw new Error('Password and hash are required');
+        }
+        return await argon2.verify(hash, password);
+    } catch (error) {
+        throw new Error(`Failed to compare password: ${error.message}`);
     }
-  );
+};
 
-  const errors = [];
-  rules.forEach((rule) => {
-    if (!rule.callback(password)) {
-      errors.push(rule.message);
-    }
-  });
+module.exports.verifyPassword = function verifyPassword(password) {
+    const rules = getValueSync(
+        'passwordVerifyRules',
+        [
+            {
+                callback: (password) => password.length >= 6,
+                message: 'Password must be at least 6 characters'
+            }
+        ],
+        {},
+        (rules) => {
+            if (!Array.isArray(rules)) {
+                return false;
+            }
+            try {
+                rules.forEach((rule) => {
+                    if (typeof rule !== 'object') {
+                        throw new Error('Rule must be an object');
+                    }
+                    if (typeof rule.callback !== 'function') {
+                        throw new Error('Rule callback must be a function');
+                    }
+                    if (typeof rule.message !== 'string') {
+                        throw new Error('Rule message must be a string');
+                    }
+                });
+                return true;
+            } catch (e) {
+                return false;
+            }
+        }
+    );
+
+    const errors = [];
+    rules.forEach((rule) => {
+        if (!rule.callback(password)) {
+            errors.push(rule.message);
+        }
+    });
 
-  if (errors.length) {
-    throw new Error(`Password is invalid: ${errors.join(', ')}`);
-  }
+    if (errors.length) {
+        throw new Error(`Password is invalid: ${errors.join(', ')}`);
+    }
 };
diff --git a/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js b/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js
index 08462aa..a906574 100644
--- a/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js
+++ b/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js
@@ -16,7 +16,7 @@ module.exports = () => {
       .where('email', 'ILIKE', userEmail)
       .and('status', '=', 1)
       .load(pool);
-    const result = comparePassword(password, user ? user.password : '');
+    const result = await comparePassword(password, user ? user.password : '');
     if (!user || !result) {
       throw new Error('Invalid email or password');
     }
diff --git a/node_modules/@evershop/evershop/src/modules/auth/pages/admin/adminLogin/LoginForm.jsx b/node_modules/@evershop/evershop/src/modules/auth/pages/admin/adminLogin/LoginForm.jsx
index 32ab7dd..167170f 100644
--- a/node_modules/@evershop/evershop/src/modules/auth/pages/admin/adminLogin/LoginForm.jsx
+++ b/node_modules/@evershop/evershop/src/modules/auth/pages/admin/adminLogin/LoginForm.jsx
@@ -1,104 +1,175 @@
 import PropTypes from 'prop-types';
-import React from 'react';
+import React, { useState } from 'react';
 import { Field } from '@components/common/form/Field';
 import { Form } from '@components/common/form/Form';
-import './LoginForm.scss';
+import { _ } from '@evershop/evershop/src/lib/locale/translate';
 import Area from '@components/common/Area';
+import './LoginForm.scss';
 
-export default function LoginForm({ authUrl, dashboardUrl }) {
-  const [error, setError] = React.useState(null);
+// Password Warning Modal Component
+const PasswordWarningModal = ({ isOpen, onClose }) => {
+    if (!isOpen) return null;
 
-  const onSuccess = (response) => {
-    if (!response.error) {
-      window.location.href = dashboardUrl;
-    } else {
-      setError(response.error.message);
-    }
-  };
+    return (
+        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
+            <div className="bg-white dark:bg-zinc-900 rounded-lg p-6 max-w-md w-full mx-4 shadow-xl">
+                <div className="flex items-start mb-4">
+                    <div className="flex-shrink-0">
+                        <svg className="w-6 h-6 text-critical" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
+                        </svg>
+                    </div>
+                    <div className="ml-3">
+                        <h3 className="text-lg font-medium text-title">
+                            {_('Check your saved passwords')}
+                        </h3>
+                    </div>
+                </div>
+
+                <div className="mt-4">
+                    <p className="text-gray-500 dark:text-gray-300">
+                        {_('The password that you just used was found in a data breach. To secure your accounts, we recommend changing it now and checking your saved passwords.')}
+                    </p>
+                </div>
+
+                <div className="mt-6 flex justify-end space-x-3">
+                    <button
+                        onClick={onClose}
+                        className="btn btn-secondary"
+                    >
+                        {_('Close')}
+                    </button>
+                    <button
+                        onClick={onClose}
+                        className="btn btn-primary"
+                    >
+                        {_('Check Passwords')}
+                    </button>
+                </div>
+            </div>
+        </div>
+    );
+};
 
-  return (
-    <div className="admin-login-form">
-      <div className="flex items-center justify-center mb-12">
-        <svg
-          width="60"
-          height="61"
-          viewBox="0 0 251 276"
-          fill="none"
-          xmlns="http://www.w3.org/2000/svg"
-        >
-          <path
-            d="M62.2402 34.2864L0.329313 68.5728L0.131725 137.524L0 206.538L62.306 240.95C96.5546 259.858 124.81 275.363 125.139 275.363C125.468 275.363 142.527 266.035 163.142 254.69C183.691 243.282 211.748 227.841 225.448 220.277L250.278 206.538V191.789V176.978L248.829 177.735C247.973 178.176 219.915 193.617 186.457 212.147C152.933 230.677 125.205 245.677 124.81 245.614C124.349 245.488 102.219 233.387 75.5444 218.639L27.0037 191.853V137.65V83.4471L48.9359 71.346C60.9229 64.7282 82.9211 52.6271 97.7401 44.4337C112.493 36.2402 124.876 29.5594 125.139 29.5594C125.402 29.5594 142.593 38.9504 163.339 50.4212L223.801 83.447L233.337 78.0776L250.278 68.5728L223.801 54.1398C202.857 42.2908 125.6 -0.0629883 124.941 6.10352e-05C124.546 6.10352e-05 96.2912 15.4415 62.2402 34.2864Z"
-            fill="#008060"
-          />
-          <path
-            d="M188.367 102.796C154.514 121.515 126.325 137.019 125.732 137.146C125.073 137.335 108.542 128.511 87.0045 116.662L49.397 95.8632V110.8L49.4628 125.675L86.0166 145.843C106.105 156.936 123.229 166.264 124.085 166.579C125.402 167.02 134.623 162.167 187.445 132.986C221.43 114.141 249.488 98.5734 249.817 98.3213C250.08 98.0691 250.212 91.3253 250.146 83.321L249.949 68.7618L188.367 102.796Z"
-            fill="#008060"
-          />
-          <path
-            d="M243.362 126.557C239.74 128.511 211.814 143.953 181.254 160.844C150.694 177.735 125.468 191.537 125.139 191.537C124.81 191.537 107.751 182.21 87.1363 170.865L49.7263 150.192L49.5288 164.688C49.397 175.781 49.5946 179.373 50.1874 179.941C51.4388 181.012 124.349 221.16 125.139 221.16C125.798 221.16 248.763 153.406 249.817 152.524C250.08 152.272 250.212 145.528 250.146 137.461L249.949 122.902L243.362 126.557Z"
-            fill="#008060"
-          />
-        </svg>
-      </div>
-      {error && <div className="text-critical py-4">{error}</div>}
-      <Form
-        action={authUrl}
-        method="POST"
-        id="adminLoginForm"
-        isJSON
-        onSuccess={onSuccess}
-        btnText="SIGN IN"
-      >
-        <Area
-          id="adminLoginForm"
-          coreComponents={[
-            {
-              component: {
-                default: Field
-              },
-              props: {
-                name: 'email',
-                type: 'email',
-                label: 'Email',
-                placeholder: 'Email',
-                validationRules: ['notEmpty', 'email']
-              },
-              sortOrder: 10
-            },
-            {
-              component: {
-                default: Field
-              },
-              props: {
-                name: 'password',
-                type: 'password',
-                label: 'Password',
-                placeholder: 'Password',
-                validationRules: ['notEmpty']
-              },
-              sortOrder: 20
-            }
-          ]}
-          noOuter
-        />
-      </Form>
-    </div>
-  );
+export default function LoginForm({
+    action,
+    homeUrl,
+    registerUrl,
+    forgotPasswordUrl
+}) {
+    const [error, setError] = React.useState(null);
+    const [showPasswordWarning, setShowPasswordWarning] = useState(false);
+
+    // Function to check if password is compromised
+    const checkPasswordBreach = async (password) => {
+        try {
+            const response = await fetch('/api/check-password', {
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify({ password })
+            });
+            const data = await response.json();
+            return data.isBreached;
+        } catch (error) {
+            console.error('Password check failed:', error);
+            return false; // Continue with login if check fails
+        }
+    };
+
+    return (
+        <div className="flex justify-center items-center">
+            <div className="login-form flex justify-center items-center">
+                <div className="login-form-inner">
+                    <h1 className="text-center">{_('Login')}</h1>
+                    {error && <div className="text-critical mb-4">{error}</div>}
+                    <Form
+                        id="loginForm"
+                        action={action}
+                        isJSON
+                        method="POST"
+                        onSuccess={async (response) => {
+                            if (!response.error) {
+                                // Get the password value from the form
+                                const password = document.querySelector('input[name="password"]').value;
+                                
+                                // Check if password is compromised
+                                const isBreached = await checkPasswordBreach(password);
+                                
+                                if (isBreached) {
+                                    setShowPasswordWarning(true);
+                                    // Still continue with login
+                                    window.location.href = homeUrl;
+                                } else {
+                                    window.location.href = homeUrl;
+                                }
+                            } else {
+                                setError(response.error.message);
+                            }
+                        }}
+                        btnText={_('SIGN IN')}
+                    >
+                        <Area
+                            id="loginFormInner"
+                            coreComponents={[
+                                {
+                                    component: { default: Field },
+                                    props: {
+                                        name: 'email',
+                                        type: 'text',
+                                        placeholder: _('Email'),
+                                        validationRules: ['notEmpty', 'email']
+                                    },
+                                    sortOrder: 10
+                                },
+                                {
+                                    component: { default: Field },
+                                    props: {
+                                        name: 'password',
+                                        type: 'password',
+                                        placeholder: _('Password'),
+                                        validationRules: ['notEmpty']
+                                    },
+                                    sortOrder: 20
+                                }
+                            ]}
+                        />
+                    </Form>
+                    <div className="text-center mt-4 gap-8 flex justify-center">
+                        <a className="text-interactive" href={registerUrl}>
+                            {_('Create an account')}
+                        </a>
+                        <a href={forgotPasswordUrl}>{_('Forgot your password?')}</a>
+                    </div>
+                </div>
+            </div>
+
+            <PasswordWarningModal 
+                isOpen={showPasswordWarning}
+                onClose={() => setShowPasswordWarning(false)}
+            />
+        </div>
+    );
 }
 
 LoginForm.propTypes = {
-  authUrl: PropTypes.string.isRequired,
-  dashboardUrl: PropTypes.string.isRequired
+    action: PropTypes.string.isRequired,
+    homeUrl: PropTypes.string.isRequired,
+    registerUrl: PropTypes.string.isRequired,
+    forgotPasswordUrl: PropTypes.string.isRequired
 };
 
 export const layout = {
-  areaId: 'content',
-  sortOrder: 10
+    areaId: 'content',
+    sortOrder: 10
 };
 
 export const query = `
-  query Query {
-    authUrl: url(routeId: "adminLoginJson")
-    dashboardUrl: url(routeId: "dashboard")
-  }
+    query Query {
+        homeUrl: url(routeId: "homepage")
+        action: url(routeId: "customerLoginJson")
+        registerUrl: url(routeId: "register")
+        forgotPasswordUrl: url(routeId: "resetPasswordPage")
+    }
 `;
\ No newline at end of file
diff --git a/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js b/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js
index bc24b6f..86b8881 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js
@@ -35,7 +35,7 @@ module.exports = async (request, response, delegate, next) => {
     // Check if password is set
     if (request.body.password) {
       // Hash the password
-      request.body.password = hashPassword(request.body.password);
+      request.body.password = await hashPassword(request.body.password);
     }
 
     await update('customer')
diff --git a/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js b/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js
index 3b0a32f..6b42908 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js
@@ -84,7 +84,7 @@ module.exports = () => {
       .and('status', '=', 1)
       .load(pool);
 
-    const result = comparePassword(password, customer ? customer.password : '');
+    const result = await comparePassword(password, customer ? customer.password : '');
     if (!customer || !result) {
       throw new Error(translate('Invalid email or password'));
     }
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js b/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
index 50d965d..a7468f4 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
@@ -21,6 +21,7 @@ const {
 const { emit } = require('@evershop/evershop/src/lib/event/emitter');
 const { getAjv } = require('../../../base/services/getAjv');
 const customerDataSchema = require('./customerDataSchema.json');
+const { CustomerSanitizer } = require('../../services/customerSanitizer');
 
 function validateCustomerDataBeforeInsert(data) {
   const ajv = getAjv();
@@ -42,7 +43,8 @@ function validateCustomerDataBeforeInsert(data) {
 }
 
 async function insertCustomerData(data, connection) {
-  const customer = await insert('customer').given(data).execute(connection);
+  const sanitizedData = CustomerSanitizer.sanitizeCustomerData(data);
+  const customer = await insert('customer').given(sanitizedData).execute(connection);
   // Delete password from customer object
   delete customer.password;
   return customer;
@@ -66,7 +68,7 @@ async function createCustomer(data, context) {
     validateCustomerDataBeforeInsert(customerData);
     const { email, password } = customerData;
     // Hash the password
-    const hashedPassword = hashPassword(password);
+    const hashedPassword = await hashPassword(password);
     // Check if email is already used
     const existingCustomer = await select()
       .from('customer')
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js b/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js
index 0f2a144..941d850 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js
@@ -43,7 +43,7 @@ async function updatePassword(customerId, newPassword, context) {
     // Verify password
     verifyPassword(newPassword);
     // Hash password
-    const hash = hashPassword(newPassword);
+    const hash = await hashPassword(newPassword);
     // Update customer password
     await hookable(updateCustomerPassword, {
       ...context,
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js b/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js
new file mode 100644
index 0000000..da06e5f
--- /dev/null
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js
@@ -0,0 +1,31 @@
+const xss = require('xss');
+const validator = require('validator');
+
+module.exports.CustomerSanitizer = class CustomerSanitizer {
+    static sanitizeFullName(fullName) {
+        if (!fullName) return '';
+
+        // Convert to string and trim whitespace
+        let sanitized = String(fullName).trim();
+
+        // Remove any HTML/script tags
+        sanitized = xss(sanitized, {
+            whiteList: {}, // No tags allowed
+            stripIgnoreTag: true
+        });
+
+        // Remove special characters but keep spaces and basic punctuation
+        sanitized = sanitized.replace(/[^\w\s\-'.]/, '');
+
+        // Escape any remaining special characters
+        return validator.escape(sanitized);
+    }
+
+    static sanitizeCustomerData(data) {
+        return {
+            full_name: this.sanitizeFullName(data.full_name),
+            email: data.email?.toLowerCase().trim(),
+            password: data.password // Password will be hashed, no sanitization needed
+        };
+    }
+}
\ No newline at end of file
