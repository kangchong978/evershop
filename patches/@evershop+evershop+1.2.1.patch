diff --git a/node_modules/@evershop/evershop/bin/install/index.js b/node_modules/@evershop/evershop/bin/install/index.js
index ad16c96..b4147be 100644
--- a/node_modules/@evershop/evershop/bin/install/index.js
+++ b/node_modules/@evershop/evershop/bin/install/index.js
@@ -229,7 +229,7 @@ DB_SSLMODE="${sslMode}"
   await startTransaction(connection);
   try {
     // Create the admin user
-    const passwordHash = hashPassword(adminUser.password || '123456');
+    const passwordHash = await hashPassword(adminUser.password || '123456');
     await execute(
       connection,
       `CREATE TABLE IF NOT EXISTS "admin_user" (
diff --git a/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js b/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
index 0406940..2d1f6c1 100644
--- a/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
+++ b/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
@@ -34,6 +34,7 @@ const {
 const {
   getCookieSecret
 } = require('@evershop/evershop/src/modules/auth/services/getCookieSecret');
+const rateLimiterMiddleware = require('./rateLimiter');
 
 module.exports = exports = {};
 
@@ -41,6 +42,12 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
   app,
   routes
 ) {
+  // Add rate limiter middleware as a regular middleware function
+  app.use((request, response, next) => {
+    const delegate = { continue: false };
+    rateLimiterMiddleware(request, response, delegate, next);
+  });
+
   app.use((request, response, next) => {
     response.debugMiddlewares = [];
     next();
@@ -74,8 +81,8 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
       process.env.NODE_ENV === 'test'
         ? undefined
         : new (sessionStorage(session))({
-            pool
-          }),
+          pool
+        }),
     secret: cookieSecret,
     cookie: {
       maxAge: getConfig('system.session.maxAge', 24 * 60 * 60 * 1000)
@@ -257,7 +264,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               stats: 'none'
             }
           );
-          middlewareFunc.context.logger.info = () => {};
+          middlewareFunc.context.logger.info = () => { };
         } else {
           middlewareFunc = route.webpackMiddleware;
         }
@@ -279,7 +286,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               stats: 'none'
             }
           );
-          notFoundMiddlewareFunc.context.logger.info = () => {};
+          notFoundMiddlewareFunc.context.logger.info = () => { };
         } else {
           notFoundMiddlewareFunc = notFoundRoute.webpackMiddleware;
         }
@@ -295,7 +302,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               publicPath: '/',
               stats: 'none'
             });
-          adminNotFoundMiddlewareFunc.context.logger.info = () => {};
+          adminNotFoundMiddlewareFunc.context.logger.info = () => { };
         } else {
           adminNotFoundMiddlewareFunc = adminNotFoundRoute.webpackMiddleware;
         }
@@ -314,8 +321,8 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
         const hotMiddleware = route.hotMiddleware
           ? route.hotMiddleware
           : require('webpack-hot-middleware')(webpackCompiler, {
-              path: `/eHot/${route.id}`
-            });
+            path: `/eHot/${route.id}`
+          });
         if (!route.hotMiddleware) {
           route.hotMiddleware = hotMiddleware;
         }
diff --git a/node_modules/@evershop/evershop/bin/lib/rateLimiter.js b/node_modules/@evershop/evershop/bin/lib/rateLimiter.js
new file mode 100644
index 0000000..5c9ac5c
--- /dev/null
+++ b/node_modules/@evershop/evershop/bin/lib/rateLimiter.js
@@ -0,0 +1,64 @@
+// modules/core/middleware/rateLimit.js
+const rateLimit = require('express-rate-limit');
+
+// Create API rate limiter
+const apiLimiter = rateLimit({
+    windowMs: 15 * 60 * 1000, // 15 minutes
+    max: 100, // Limit each IP to 100 requests per windowMs
+    message: 'Too many API requests from this IP, please try again later'
+});
+
+// Create login rate limiter
+const loginLimiter = rateLimit({
+    windowMs: 60 * 60 * 1000, // 1 hour
+    max: 5, // Limit each IP to 5 login attempts per hour
+    message: 'Too many login attempts from this IP, please try again after an hour'
+});
+
+// Create registration rate limiter
+const registerLimiter = rateLimit({
+    windowMs: 24 * 60 * 60 * 1000, // 24 hours
+    max: 3, // Limit each IP to 3 registration attempts per day
+    message: 'Too many registration attempts from this IP, please try again tomorrow'
+});
+
+// Fixed rate limiter middleware
+const rateLimiterMiddleware = async (request, response, delegate, next) => {
+    try {
+        // Apply API rate limiter to all API routes
+        if (request.originalUrl.startsWith('/api/')) {
+            return apiLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // Apply login rate limiter to login route
+        if (request.originalUrl === '/customer/login' && request.method === 'POST') {
+            return loginLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // Apply registration rate limiter to registration route
+        if (request.originalUrl === '/customer/register' && request.method === 'POST') {
+            return registerLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // No rate limiting applied
+        delegate.continue = true;
+        next();
+    } catch (error) {
+        console.error('Rate limiter error:', error);
+        response.status(500).json({
+            error: 'Rate limiter error',
+            message: error.message
+        });
+    }
+};
+
+module.exports = rateLimiterMiddleware;
\ No newline at end of file
diff --git a/node_modules/@evershop/evershop/bin/lib/startUp.js b/node_modules/@evershop/evershop/bin/lib/startUp.js
index 701bc46..07c3718 100644
--- a/node_modules/@evershop/evershop/bin/lib/startUp.js
+++ b/node_modules/@evershop/evershop/bin/lib/startUp.js
@@ -1,4 +1,5 @@
-const http = require('http');
+const https = require('https');
+const fs = require('fs');
 const config = require('config');
 const { Handler } = require('@evershop/evershop/src/lib/middleware/Handler');
 const spawn = require('cross-spawn');
@@ -21,7 +22,10 @@ const { getEnabledExtensions } = require('../extension');
 
 let app = createApp();
 /** Create a http server */
-const server = http.createServer(app);
+const server = https.createServer({
+  key: fs.readFileSync('key.pem'),
+  cert: fs.readFileSync('cert.pem')
+}, app);
 
 module.exports.start = async function start(cb) {
   const modules = [...getCoreModules(), ...getEnabledExtensions()];
diff --git a/node_modules/@evershop/evershop/bin/user/changePassword.js b/node_modules/@evershop/evershop/bin/user/changePassword.js
index 675400e..5651b87 100644
--- a/node_modules/@evershop/evershop/bin/user/changePassword.js
+++ b/node_modules/@evershop/evershop/bin/user/changePassword.js
@@ -54,7 +54,7 @@ async function updatePassword() {
     }
     await update('admin_user')
       .given({
-        password: hashPassword(password)
+        password: await hashPassword(password)
       })
       .where('admin_user_id', '=', user.admin_user_id)
       .execute(pool);
diff --git a/node_modules/@evershop/evershop/bin/user/create.js b/node_modules/@evershop/evershop/bin/user/create.js
index 0333128..e0c9bf6 100644
--- a/node_modules/@evershop/evershop/bin/user/create.js
+++ b/node_modules/@evershop/evershop/bin/user/create.js
@@ -64,7 +64,7 @@ async function createAdminUser() {
       .given({
         full_name,
         email,
-        password: hashPassword(password)
+        password: await hashPassword(password)
       })
       .execute(pool);
     success('Admin user created successfully');
diff --git a/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js b/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js
index 79846b9..75039c0 100644
--- a/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js
+++ b/node_modules/@evershop/evershop/src/lib/util/passwordHelper.js
@@ -1,59 +1,80 @@
-const bcrypt = require('bcryptjs');
 const { getValueSync } = require('./registry');
+const argon2 = require('argon2');
 
-module.exports.hashPassword = function hashPassword(password) {
-  const salt = bcrypt.genSaltSync(10);
-  const hash = bcrypt.hashSync(password, salt);
-  return hash;
+// Argon2 configuration object for consistent settings
+const argon2Config = {
+    type: argon2.argon2id,
+    memoryCost: 65536,    // 64MB
+    timeCost: 3,          // 3 iterations
+    parallelism: 4,
+    saltLength: 16
 };
 
-module.exports.comparePassword = function comparePassword(password, hash) {
-  return bcrypt.compareSync(password, hash);
+module.exports.hashPassword = async function hashPassword(password) {
+    try {
+        if (!password) {
+            throw new Error('Password is required');
+        }
+        return await argon2.hash(password, argon2Config);
+    } catch (error) {
+        throw new Error(`Failed to hash password: ${error.message}`);
+    }
 };
 
-module.exports.verifyPassword = function verifyPassword(password) {
-  const rules = getValueSync(
-    'passwordVerifyRules',
-    [
-      {
-        callback: (password) => password.length >= 6,
-        message: 'Password must be at least 6 characters'
-      }
-    ],
-    {},
-    (rules) => {
-      // rules must be an array
-      if (!Array.isArray(rules)) {
-        return false;
-      }
-      try {
-        // Each rule must be an object with callback and message
-        rules.forEach((rule) => {
-          if (typeof rule !== 'object') {
-            throw new Error('Rule must be an object');
-          }
-          if (typeof rule.callback !== 'function') {
-            throw new Error('Rule callback must be a function');
-          }
-          if (typeof rule.message !== 'string') {
-            throw new Error('Rule message must be a string');
-          }
-        });
-        return true;
-      } catch (e) {
-        return false;
-      }
+module.exports.comparePassword = async function comparePassword(password, hash) {
+    try {
+        if (!password || !hash) {
+            throw new Error('Password and hash are required');
+        }
+        return await argon2.verify(hash, password);
+    } catch (error) {
+        throw new Error(`Failed to compare password: ${error.message}`);
     }
-  );
+};
 
-  const errors = [];
-  rules.forEach((rule) => {
-    if (!rule.callback(password)) {
-      errors.push(rule.message);
-    }
-  });
+module.exports.verifyPassword = function verifyPassword(password) {
+    const rules = getValueSync(
+        'passwordVerifyRules',
+        [
+            {
+                callback: (password) => password.length >= 6,
+                message: 'Password must be at least 6 characters'
+            }
+        ],
+        {},
+        (rules) => {
+            // rules must be an array
+            if (!Array.isArray(rules)) {
+                return false;
+            }
+            try {
+                // Each rule must be an object with callback and message
+                rules.forEach((rule) => {
+                    if (typeof rule !== 'object') {
+                        throw new Error('Rule must be an object');
+                    }
+                    if (typeof rule.callback !== 'function') {
+                        throw new Error('Rule callback must be a function');
+                    }
+                    if (typeof rule.message !== 'string') {
+                        throw new Error('Rule message must be a string');
+                    }
+                });
+                return true;
+            } catch (e) {
+                return false;
+            }
+        }
+    );
+
+    const errors = [];
+    rules.forEach((rule) => {
+        if (!rule.callback(password)) {
+            errors.push(rule.message);
+        }
+    });
 
-  if (errors.length) {
-    throw new Error(`Password is invalid: ${errors.join(', ')}`);
-  }
+    if (errors.length) {
+        throw new Error(`Password is invalid: ${errors.join(', ')}`);
+    }
 };
diff --git a/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js b/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js
index 08462aa..a906574 100644
--- a/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js
+++ b/node_modules/@evershop/evershop/src/modules/auth/bootstrap.js
@@ -16,7 +16,7 @@ module.exports = () => {
       .where('email', 'ILIKE', userEmail)
       .and('status', '=', 1)
       .load(pool);
-    const result = comparePassword(password, user ? user.password : '');
+    const result = await comparePassword(password, user ? user.password : '');
     if (!user || !result) {
       throw new Error('Invalid email or password');
     }
diff --git a/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js b/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js
index bc24b6f..86b8881 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/api/updateCustomer/updateCustomer.js
@@ -35,7 +35,7 @@ module.exports = async (request, response, delegate, next) => {
     // Check if password is set
     if (request.body.password) {
       // Hash the password
-      request.body.password = hashPassword(request.body.password);
+      request.body.password = await hashPassword(request.body.password);
     }
 
     await update('customer')
diff --git a/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js b/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js
index 3b0a32f..6b42908 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/bootstrap.js
@@ -84,7 +84,7 @@ module.exports = () => {
       .and('status', '=', 1)
       .load(pool);
 
-    const result = comparePassword(password, customer ? customer.password : '');
+    const result = await comparePassword(password, customer ? customer.password : '');
     if (!customer || !result) {
       throw new Error(translate('Invalid email or password'));
     }
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js b/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
index 50d965d..a7468f4 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
@@ -21,6 +21,7 @@ const {
 const { emit } = require('@evershop/evershop/src/lib/event/emitter');
 const { getAjv } = require('../../../base/services/getAjv');
 const customerDataSchema = require('./customerDataSchema.json');
+const { CustomerSanitizer } = require('../../services/customerSanitizer');
 
 function validateCustomerDataBeforeInsert(data) {
   const ajv = getAjv();
@@ -42,7 +43,8 @@ function validateCustomerDataBeforeInsert(data) {
 }
 
 async function insertCustomerData(data, connection) {
-  const customer = await insert('customer').given(data).execute(connection);
+  const sanitizedData = CustomerSanitizer.sanitizeCustomerData(data);
+  const customer = await insert('customer').given(sanitizedData).execute(connection);
   // Delete password from customer object
   delete customer.password;
   return customer;
@@ -66,7 +68,7 @@ async function createCustomer(data, context) {
     validateCustomerDataBeforeInsert(customerData);
     const { email, password } = customerData;
     // Hash the password
-    const hashedPassword = hashPassword(password);
+    const hashedPassword = await hashPassword(password);
     // Check if email is already used
     const existingCustomer = await select()
       .from('customer')
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js b/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js
index 0f2a144..941d850 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customer/updatePassword.js
@@ -43,7 +43,7 @@ async function updatePassword(customerId, newPassword, context) {
     // Verify password
     verifyPassword(newPassword);
     // Hash password
-    const hash = hashPassword(newPassword);
+    const hash = await hashPassword(newPassword);
     // Update customer password
     await hookable(updateCustomerPassword, {
       ...context,
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js b/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js
new file mode 100644
index 0000000..da06e5f
--- /dev/null
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js
@@ -0,0 +1,31 @@
+const xss = require('xss');
+const validator = require('validator');
+
+module.exports.CustomerSanitizer = class CustomerSanitizer {
+    static sanitizeFullName(fullName) {
+        if (!fullName) return '';
+
+        // Convert to string and trim whitespace
+        let sanitized = String(fullName).trim();
+
+        // Remove any HTML/script tags
+        sanitized = xss(sanitized, {
+            whiteList: {}, // No tags allowed
+            stripIgnoreTag: true
+        });
+
+        // Remove special characters but keep spaces and basic punctuation
+        sanitized = sanitized.replace(/[^\w\s\-'.]/, '');
+
+        // Escape any remaining special characters
+        return validator.escape(sanitized);
+    }
+
+    static sanitizeCustomerData(data) {
+        return {
+            full_name: this.sanitizeFullName(data.full_name),
+            email: data.email?.toLowerCase().trim(),
+            password: data.password // Password will be hashed, no sanitization needed
+        };
+    }
+}
\ No newline at end of file
