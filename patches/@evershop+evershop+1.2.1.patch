diff --git a/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js b/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
index 0406940..4850d4b 100644
--- a/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
+++ b/node_modules/@evershop/evershop/bin/lib/addDefaultMiddlewareFuncs.js
@@ -34,6 +34,7 @@ const {
 const {
   getCookieSecret
 } = require('@evershop/evershop/src/modules/auth/services/getCookieSecret');
+const rateLimiterMiddleware = require('./rateLimiter');
 
 module.exports = exports = {};
 
@@ -41,6 +42,12 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
   app,
   routes
 ) {
+  // Add rate limiter middleware as a regular middleware function
+  app.use((request, response, next) => {
+    const delegate = { continue: false };
+    rateLimiterMiddleware(request, response, delegate, next);
+  });
+
   app.use((request, response, next) => {
     response.debugMiddlewares = [];
     next();
@@ -74,8 +81,8 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
       process.env.NODE_ENV === 'test'
         ? undefined
         : new (sessionStorage(session))({
-            pool
-          }),
+          pool
+        }),
     secret: cookieSecret,
     cookie: {
       maxAge: getConfig('system.session.maxAge', 24 * 60 * 60 * 1000)
@@ -257,7 +264,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               stats: 'none'
             }
           );
-          middlewareFunc.context.logger.info = () => {};
+          middlewareFunc.context.logger.info = () => { };
         } else {
           middlewareFunc = route.webpackMiddleware;
         }
@@ -279,7 +286,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               stats: 'none'
             }
           );
-          notFoundMiddlewareFunc.context.logger.info = () => {};
+          notFoundMiddlewareFunc.context.logger.info = () => { };
         } else {
           notFoundMiddlewareFunc = notFoundRoute.webpackMiddleware;
         }
@@ -295,7 +302,7 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
               publicPath: '/',
               stats: 'none'
             });
-          adminNotFoundMiddlewareFunc.context.logger.info = () => {};
+          adminNotFoundMiddlewareFunc.context.logger.info = () => { };
         } else {
           adminNotFoundMiddlewareFunc = adminNotFoundRoute.webpackMiddleware;
         }
@@ -314,8 +321,8 @@ exports.addDefaultMiddlewareFuncs = function addDefaultMiddlewareFuncs(
         const hotMiddleware = route.hotMiddleware
           ? route.hotMiddleware
           : require('webpack-hot-middleware')(webpackCompiler, {
-              path: `/eHot/${route.id}`
-            });
+            path: `/eHot/${route.id}`
+          });
         if (!route.hotMiddleware) {
           route.hotMiddleware = hotMiddleware;
         }
diff --git a/node_modules/@evershop/evershop/bin/lib/rateLimiter.js b/node_modules/@evershop/evershop/bin/lib/rateLimiter.js
new file mode 100644
index 0000000..5c9ac5c
--- /dev/null
+++ b/node_modules/@evershop/evershop/bin/lib/rateLimiter.js
@@ -0,0 +1,64 @@
+// modules/core/middleware/rateLimit.js
+const rateLimit = require('express-rate-limit');
+
+// Create API rate limiter
+const apiLimiter = rateLimit({
+    windowMs: 15 * 60 * 1000, // 15 minutes
+    max: 100, // Limit each IP to 100 requests per windowMs
+    message: 'Too many API requests from this IP, please try again later'
+});
+
+// Create login rate limiter
+const loginLimiter = rateLimit({
+    windowMs: 60 * 60 * 1000, // 1 hour
+    max: 5, // Limit each IP to 5 login attempts per hour
+    message: 'Too many login attempts from this IP, please try again after an hour'
+});
+
+// Create registration rate limiter
+const registerLimiter = rateLimit({
+    windowMs: 24 * 60 * 60 * 1000, // 24 hours
+    max: 3, // Limit each IP to 3 registration attempts per day
+    message: 'Too many registration attempts from this IP, please try again tomorrow'
+});
+
+// Fixed rate limiter middleware
+const rateLimiterMiddleware = async (request, response, delegate, next) => {
+    try {
+        // Apply API rate limiter to all API routes
+        if (request.originalUrl.startsWith('/api/')) {
+            return apiLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // Apply login rate limiter to login route
+        if (request.originalUrl === '/customer/login' && request.method === 'POST') {
+            return loginLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // Apply registration rate limiter to registration route
+        if (request.originalUrl === '/customer/register' && request.method === 'POST') {
+            return registerLimiter(request, response, () => {
+                delegate.continue = true;
+                next();
+            });
+        }
+
+        // No rate limiting applied
+        delegate.continue = true;
+        next();
+    } catch (error) {
+        console.error('Rate limiter error:', error);
+        response.status(500).json({
+            error: 'Rate limiter error',
+            message: error.message
+        });
+    }
+};
+
+module.exports = rateLimiterMiddleware;
\ No newline at end of file
diff --git a/node_modules/@evershop/evershop/bin/lib/startUp.js b/node_modules/@evershop/evershop/bin/lib/startUp.js
index 701bc46..69a1e9d 100644
--- a/node_modules/@evershop/evershop/bin/lib/startUp.js
+++ b/node_modules/@evershop/evershop/bin/lib/startUp.js
@@ -1,4 +1,5 @@
-const http = require('http');
+const https = require('https');
+const fs = require('fs');
 const config = require('config');
 const { Handler } = require('@evershop/evershop/src/lib/middleware/Handler');
 const spawn = require('cross-spawn');
@@ -21,7 +22,10 @@ const { getEnabledExtensions } = require('../extension');
 
 let app = createApp();
 /** Create a http server */
-const server = http.createServer(app);
+const server = https.createServer({
+  key: fs.readFileSync('key.pem'),
+  cert: fs.readFileSync('cert.pem')
+}, app);
 
 module.exports.start = async function start(cb) {
   const modules = [...getCoreModules(), ...getEnabledExtensions()];
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js b/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
index 50d965d..c6d8c13 100644
--- a/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customer/createCustomer.js
@@ -21,6 +21,7 @@ const {
 const { emit } = require('@evershop/evershop/src/lib/event/emitter');
 const { getAjv } = require('../../../base/services/getAjv');
 const customerDataSchema = require('./customerDataSchema.json');
+const { CustomerSanitizer } = require('../../services/customerSanitizer');
 
 function validateCustomerDataBeforeInsert(data) {
   const ajv = getAjv();
@@ -42,7 +43,8 @@ function validateCustomerDataBeforeInsert(data) {
 }
 
 async function insertCustomerData(data, connection) {
-  const customer = await insert('customer').given(data).execute(connection);
+  const sanitizedData = CustomerSanitizer.sanitizeCustomerData(data);
+  const customer = await insert('customer').given(sanitizedData).execute(connection);
   // Delete password from customer object
   delete customer.password;
   return customer;
diff --git a/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js b/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js
new file mode 100644
index 0000000..da06e5f
--- /dev/null
+++ b/node_modules/@evershop/evershop/src/modules/customer/services/customerSanitizer.js
@@ -0,0 +1,31 @@
+const xss = require('xss');
+const validator = require('validator');
+
+module.exports.CustomerSanitizer = class CustomerSanitizer {
+    static sanitizeFullName(fullName) {
+        if (!fullName) return '';
+
+        // Convert to string and trim whitespace
+        let sanitized = String(fullName).trim();
+
+        // Remove any HTML/script tags
+        sanitized = xss(sanitized, {
+            whiteList: {}, // No tags allowed
+            stripIgnoreTag: true
+        });
+
+        // Remove special characters but keep spaces and basic punctuation
+        sanitized = sanitized.replace(/[^\w\s\-'.]/, '');
+
+        // Escape any remaining special characters
+        return validator.escape(sanitized);
+    }
+
+    static sanitizeCustomerData(data) {
+        return {
+            full_name: this.sanitizeFullName(data.full_name),
+            email: data.email?.toLowerCase().trim(),
+            password: data.password // Password will be hashed, no sanitization needed
+        };
+    }
+}
\ No newline at end of file
